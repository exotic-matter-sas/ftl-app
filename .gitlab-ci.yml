image: docker:stable

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  POSTGRES_DB: reset
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: bleubleu

services:
  - docker:dind

stages:
  - build-frontend
  - build-backend
  - docker
  - test
  - deploy

compile-frontend:
  stage: build-frontend
  image: node:10.15.3-alpine
  artifacts:
    paths:
      - ftl/frontend/dist
      - ftl/frontend/webpack-stats.json
      - ftl/frontend/node_modules
    expire_in: 1 hour
  script:
    - cd ftl/frontend
    - npm ci
    - npm run build

test-frontend-js:
  stage: test
  image: node:10.15.3-alpine
  dependencies:
    - compile-frontend
  script:
    - cd ftl/frontend
    - npm run test:unit

compile-backend:
  stage: build-backend
  image: registry.gitlab.com/exotic-matter/ftl-base-image-ci:latest
  dependencies:
    - compile-frontend
  artifacts:
    paths:
      - ftl
      - venv
    expire_in: 1 hour
  script:
    - export DJANGO_SETTINGS_MODULE=ftl.settings_tests
    - virtualenv venv && source venv/bin/activate
    - cd ftl && pip3 install -r requirements.txt && pip3 install -r requirements_dev.txt
    - python3 -m compileall ./
    - python3 manage.py compilemessages
    - python3 manage.py collectstatic

test-fast-python:
  stage: test
  image: registry.gitlab.com/exotic-matter/ftl-base-image-ci:latest
  services:
    - postgres:10.7-alpine
  dependencies:
    - compile-backend
  script:
    - export DJANGO_SETTINGS_MODULE=ftl.settings_tests
    - source venv/bin/activate && cd ftl
    - python3 manage.py test -v 2 --exclude-tag=slow

test-slow-python:
  stage: test
  image: registry.gitlab.com/exotic-matter/ftl-base-image-ci:latest
  services:
    - postgres:10.7-alpine
  dependencies:
    - compile-backend
  script:
    - export DJANGO_SETTINGS_MODULE=ftl.settings_tests
    - source venv/bin/activate && cd ftl
    - python3 manage.py test -v 2 --tag=slow
  allow_failure: false
  when: manual

build-docker:
  stage: docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  when: manual
