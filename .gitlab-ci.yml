image: docker:stable

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  POSTGRES_DB: reset
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: bleubleu

services:
  - docker:dind

stages:
  - build-frontend
  - build-backend
  - run-tests
  - generate-reports-and-doc

check-frontend:
  stage: .pre
  needs: []
  image: node:lts-alpine
  script:
    - npx prettier@2.0.5 . --check

check-backend:
  stage: .pre
  needs: []
  image: python:3.7-slim
  script:
    - pip3 install black==19.10b0
    - black --check .

compile-frontend:
  stage: build-frontend
  needs: ["check-frontend", "check-backend"]
  image: node:lts-alpine
  artifacts:
    paths:
      - ftl/frontend/dist
      - ftl/frontend/webpack-stats.json
      - ftl/frontend/node_modules
    expire_in: 7 days
  script:
    - cd ftl/frontend
    - npm ci
    - npm run build

compile-backend:
  stage: build-backend
  needs: ["compile-frontend"]
  image: registry.gitlab.com/exotic-matter/ftl-base-image-ci:latest
  dependencies:
    - compile-frontend
  artifacts:
    paths:
      - ftl
      - venv
    expire_in: 7 days
  script:
    - export DJANGO_SETTINGS_MODULE=ftl.settings_tests
    - virtualenv venv && source venv/bin/activate
    - cd ftl && pip3 install -r requirements.txt && pip3 install -r requirements_dev.txt
    - python3 -m compileall ./
    - python3 manage.py compilemessages
    - python3 manage.py collectstatic

test-frontend-js:
  stage: run-tests
  needs: ["compile-frontend"]
  image: node:lts-alpine
  dependencies:
    - compile-frontend
  artifacts:
    paths:
      - ftl/frontend/coverage
    expire_in: 7 days
  script:
    - cd ftl/frontend
    - npx vue-cli-service test:unit --coverage

test-fast-python:
  stage: run-tests
  needs: ["compile-backend"]
  image: registry.gitlab.com/exotic-matter/ftl-base-image-ci:latest
  services:
    - postgres:11-alpine
  dependencies:
    - compile-backend
  artifacts:
    paths:
      - ftl/.coverage.*
    expire_in: 7 days
  script:
    - export DJANGO_SETTINGS_MODULE=ftl.settings_tests
    - source venv/bin/activate && cd ftl
    - python3 -m coverage run manage.py test -v 2 --exclude-tag=slow

test-slow-python-firefox:
  stage: run-tests
  needs: ["compile-frontend", "compile-backend"]
  image: registry.gitlab.com/exotic-matter/ftl-base-image-ci:latest
  services:
    - postgres:11-alpine
  dependencies:
    - compile-backend
  artifacts:
    paths:
      - ftl/.coverage.*
      - ftl/ftests/tests_screenshots
    expire_in: 7 days
  script:
      - export TEST_BROWSER=firefox
      - export DJANGO_SETTINGS_MODULE=ftl.settings_tests
      - source venv/bin/activate && cd ftl
      - python3 -m coverage run manage.py test -v 2 --tag=slow
  allow_failure: false
  when: manual

test-slow-python-chrome:
  stage: run-tests
  needs: ["compile-frontend", "compile-backend"]
  image: registry.gitlab.com/exotic-matter/ftl-base-image-ci:latest
  services:
    - postgres:11-alpine
  dependencies:
    - compile-backend
  artifacts:
    paths:
      - ftl/.coverage.*
      - ftl/ftests/tests_screenshots
      - ftl/ftests/browser_logs
    expire_in: 7 days
  script:
    - export TEST_BROWSER=chrome
    - export DJANGO_SETTINGS_MODULE=ftl.settings_tests
    - source venv/bin/activate && cd ftl
    - python3 -m coverage run manage.py test -v 2 --tag=slow
  allow_failure: false
  when: manual

check-browser-logs:
  stage: generate-reports-and-doc
  needs: ["test-slow-python-chrome"]
  image: registry.gitlab.com/exotic-matter/ftl-base-image-ci:latest
  services:
    - postgres:11-alpine
  dependencies:
    - test-slow-python-chrome
  script:
    - cd ftl/ftests/tools
    - python3 check_browser_logs.py
  allow_failure: false

python-coverage:
  stage: generate-reports-and-doc
  needs: ["compile-backend", "test-fast-python", "test-slow-python-firefox", "test-slow-python-chrome"]
  image: registry.gitlab.com/exotic-matter/ftl-base-image-ci:latest
  services:
    - postgres:11-alpine
  dependencies:
    - compile-backend
    - test-fast-python
    - test-slow-python-firefox
    - test-slow-python-chrome
  artifacts:
    name: "python_coverage_report"
    paths:
      - ftl/htmlcov
      - ftl/coverage.svg
    expire_in: 7 days
  script:
      - source venv/bin/activate && cd ftl
      - python3 -m coverage combine
      - python3 -m coverage html
      - python3 -m coverage_badge -o coverage.svg
  allow_failure: true
  only:
   - master

javascript-coverage:
  stage: generate-reports-and-doc
  needs: ["compile-frontend", "test-frontend-js"]
  image: node:lts-alpine
  dependencies:
    - compile-frontend
    - test-frontend-js
  artifacts:
    paths:
      - ftl/frontend/coverage/lcov-report
      - ftl/frontend/coverage/badge.svg
    expire_in: 7 days
  script:
    - cd ftl/frontend
    - npx make-coverage-badge
  allow_failure: true
  only:
   - master

build-doc:
  stage: generate-reports-and-doc
  needs: []
  image: python:3.7-slim
  artifacts:
    paths:
      - site
    expire_in: 7 days
  script:
    - pip3 install mkdocs
    - python3 -m mkdocs build
  allow_failure: true
  only:
    - master

pages: # Magic job name that publish public folder to Gitlab Pages
  stage: .post
  needs: ["python-coverage", "javascript-coverage", "build-doc"]
  dependencies:
    - python-coverage
    - javascript-coverage
    - build-doc
  artifacts:
    paths:
      - public # Required to trigger Gitlab pages:deploy job
  script:
    - mkdir public
    - mv ftl/htmlcov public/python-coverage
    - mv ftl/coverage.svg public/python-coverage.svg
    - mv ftl/frontend/coverage/lcov-report public/javascript-coverage
    - mv ftl/frontend/coverage/badge.svg public/javascript-coverage.svg
    - mv site public/doc
  allow_failure: true
  only:
   - master

build-docker-gitlab:
  stage: .post
  needs: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  when: manual

build-docker-hub:
  stage: .post
  needs: []
  script:
    - docker login -u $DOCKER_REGISTRY_LOGIN -p $DOCKER_REGISTRY_PASSWORD
    - docker build -t $DOCKER_REGISTRY_IMAGE:$CI_COMMIT_TAG .
    - docker push $DOCKER_REGISTRY_IMAGE:$CI_COMMIT_TAG
  when: manual
  only:
    - tags
  except:
    - branches
